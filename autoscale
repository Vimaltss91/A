
import gitlab
import os
from typing import List, Dict

# Configuration
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab instance URL
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")  # Store token in environment variable
REPOS = ["project1", "project2"]  # List of repository names (replace with your repos)

def get_gitlab_client() -> gitlab.Gitlab:
    """Initialize and return a GitLab client."""
    if not GITLAB_TOKEN:
        raise ValueError("GITLAB_TOKEN environment variable not set")
    return gitlab.Gitlab(GITLAB_URL, private_token=GITLAB_TOKEN)

def find_project(client: gitlab.Gitlab, repo_name: str) -> Dict:
    """Find a project by name and return its details."""
    projects = client.projects.list(search=repo_name, owned=True, all=True)
    for project in projects:
        if project.name.lower() == repo_name.lower():
            return project
    raise ValueError(f"Project {repo_name} not found")

def get_pipeline_schedules(project: Dict) -> List[Dict]:
    """Retrieve all pipeline schedules for a given project."""
    return project.pipelineschedules.list()

def disable_schedule(project: Dict, schedule: Dict) -> None:
    """Disable a pipeline schedule by setting active to False."""
    schedule.active = False
    schedule.save()
    print(f"Disabled schedule ID {schedule.id} for project {project.name}")

def main():
    try:
        # Initialize GitLab client
        gl = get_gitlab_client()

        # Iterate through repositories
        for repo_name in REPOS:
            print(f"\nProcessing repository: {repo_name}")
            try:
                # Find project
                project = find_project(gl, repo_name)
                
                # Get pipeline schedules
                schedules = get_pipeline_schedules(project)
                
                if not schedules:
                    print(f"No pipeline schedules found for {repo_name}")
                    continue
                
                # Process each schedule
                for schedule in schedules:
                    print(f"\nSchedule ID: {schedule.id}")
                    print(f"Description: {schedule.description}")
                    print(f"Cron: {schedule.cron}")
                    print(f"Active: {schedule.active}")
                    print(f"Owner: {schedule.owner['name']} ({schedule.owner['username']})")
                    
                    # Disable the schedule
                    disable_schedule(project, schedule)
                    
            except ValueError as e:
                print(f"Error processing {repo_name}: {str(e)}")
            except Exception as e:
                print(f"Unexpected error for {repo_name}: {str(e)}")
                
    except Exception as e:
        print(f"Failed to initialize GitLab client: {str(e)}")

if __name__ == "__main__":
    main()




----------------------------------------------
---------------------------------------------

import requests
import urllib.parse
# --- Config ---
GITLAB_URL = "https://gitlab.com"
ACCESS_TOKEN = "YOUR_ACCESS_TOKEN"
PROJECTS = [
    "group/project1",
    "group/project2",
    "group/projectN"
]

HEADERS = {
    "PRIVATE-TOKEN": ACCESS_TOKEN,
    "Content-Type": "application/json"
}

def get_pipeline_schedules(project_path):
    encoded_path = urllib.parse.quote_plus(project_path)
    url = f"{GITLAB_URL}/api/v4/projects/{encoded_path}/pipeline_schedules"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    return response.json()

def disable_schedule(project_path, schedule_id):
    encoded_path = urllib.parse.quote_plus(project_path)
    url = f"{GITLAB_URL}/api/v4/projects/{encoded_path}/pipeline_schedules/{schedule_id}"
    response = requests.put(url, json={"active": False}, headers=HEADERS)
    if response.status_code == 200:
        print(f"â†’ Disabled schedule ID {schedule_id}")
    else:
        print(f"Failed to disable schedule ID {schedule_id}: {response.status_code} - {response.text}")

# --- Main ---
for project in PROJECTS:
    print(f"\n--- Checking project: {project} ---")
    try:
        schedules = get_pipeline_schedules(project)
        if not schedules:
            print("No schedules found.")
            continue

        for sched in schedules:
            sid = sched["id"]
            cron = sched["cron"]
            active = sched["active"]
            owner = sched.get("owner", {}).get("username", "unknown")

            print(f"Schedule ID: {sid}, Cron: {cron}, Owner: {owner}, Active: {active}")
            if active:
                disable_schedule(project, sid)

    except requests.exceptions.HTTPError as e:
        print(f"Error accessing project {project}: {e}")
    except Exception as e:
        print(f"Unexpected error in {project}: {e}")

