As part of pipeline innovation, we successfully introduced automated namespace assignment in OCI. This has enabled the pre-dev team and DevOps to deploy without resource constraints, addressing a long-standing major concern. Additionally, the assigned namespaces have facilitated parallel deployments, reducing ATS result times by one-third, significantly boosting the development team's productivity.

Furthermore, multiple steps have been implemented to efficiently utilize OCI resources, including taking down namespaces after runs, scaling down operations, and validating known failures. We are also automating manual interventions as much as possible to streamline the process.


Consistently communicate with the entire audience via Slack or email to address any blocker issues or release-related activities.

Collaborate with DevOps and development teams to enhance processes, conduct reviews, and provide mutual support.
Hold discussions with DevOps on future tasks, including OCI and pipeline-related activities across NF.








import requests
import os
from typing import List, Dict
from urllib.parse import quote

# Configuration
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab instance URL
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")  # Store token in environment variable
REPOS = ["namespace/project1", "namespace/project2"]  # List of repository paths (e.g., group/project)

# API Endpoints
API_BASE = f"{GITLAB_URL}/api/v4"

def get_headers() -> Dict:
    """Return headers with authorization token."""
    if not GITLAB_TOKEN:
        raise ValueError("GITLAB_TOKEN environment variable not set")
    return {"Private-Token": GITLAB_TOKEN}

def get_project_id(repo_path: str) -> int:
    """Get project ID by repository path."""
    encoded_path = quote(repo_path, safe="")
    url = f"{API_BASE}/projects/{encoded_path}"
    response = requests.get(url, headers=get_headers())
    if response.status_code != 200:
        raise ValueError(f"Project {repo_path} not found: {response.text}")
    return response.json()["id"]

def get_pipeline_schedules(project_id: int) -> List[Dict]:
    """Retrieve all pipeline schedules for a project, handling pagination."""
    schedules = []
    page = 1
    per_page = 100  # Maximum allowed by GitLab API
    
    while True:
        url = f"{API_BASE}/projects/{project_id}/pipeline_schedules?page={page}&per_page={per_page}"
        response = requests.get(url, headers=get_headers())
        if response.status_code != 200:
            raise ValueError(f"Failed to get schedules for project ID {project_id}: {response.text}")
        
        page_schedules = response.json()
        if not page_schedules:  # No more schedules
            break
            
        schedules.extend(page_schedules)
        page += 1
    
    return schedules

def take_ownership(project_id: int, schedule_id: int) -> None:
    """Take ownership of a pipeline schedule."""
    url = f"{API_BASE}/projects/{project_id}/pipeline_schedules/{schedule_id}/take_ownership"
    response = requests.post(url, headers=get_headers())
    if response.status_code != 200:
        raise ValueError(f"Failed to take ownership of schedule ID {schedule_id}: {response.text}")
    print(f"Took ownership of schedule ID {schedule_id} for project ID {project_id}")

def disable_schedule(project_id: int, schedule_id: int) -> None:
    """Disable a pipeline schedule by setting active to False."""
    url = f"{API_BASE}/projects/{project_id}/pipeline_schedules/{schedule_id}"
    data = {"active": False}
    response = requests.put(url, headers=get_headers(), json=data)
    if response.status_code != 200:
        raise ValueError(f"Failed to disable schedule ID {schedule_id}: {response.text}")
    print(f"Disabled schedule ID {schedule_id} for project ID {project_id}")

def main():
    try:
        # Iterate through repositories
        for repo_path in REPOS:
            print(f"\nProcessing repository: {repo_path}")
            try:
                # Get project ID
                project_id = get_project_id(repo_path)
                
                # Get all pipeline schedules
                schedules = get_pipeline_schedules(project_id)
                
                if not schedules:
                    print(f"No pipeline schedules found for {repo_path}")
                    continue
                
                print(f"Found {len(schedules)} schedules for {repo_path}")
                
                # Process each schedule
                for schedule in schedules:
                    print(f"\nSchedule ID: {schedule['id']}")
                    print(f"Description: {schedule['description']}")
                    print(f"Cron: {schedule['cron']}")
                    print(f"Active: {schedule['active']}")
                    print(f"Current Owner: {schedule['owner']['name']} ({schedule['owner']['username']})")
                    
                    # Take ownership
                    take_ownership(project_id, schedule["id"])
                    
                    # Disable the schedule
                    disable_schedule(project_id, schedule["id"])
                    
            except ValueError as e:
                print(f"Error processing {repo_path}: {str(e)}")
            except Exception as e:
                print(f"Unexpected error for {repo_path}: {str(e)}")
                
    except Exception as e:
        print(f"Failed to process repositories: {str(e)}")

if __name__ == "__main__":
    main()




------------------------
-----------------------
import requests
import os
from typing import List, Dict
from urllib.parse import quote

# Configuration
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab instance URL
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")  # Store token in environment variable
REPOS = ["namespace/project1", "namespace/project2"]  # List of repository paths (e.g., group/project)

# API Endpoints
API_BASE = f"{GITLAB_URL}/api/v4"

def get_headers() -> Dict:
    """Return headers with authorization token."""
    if not GITLAB_TOKEN:
        raise ValueError("GITLAB_TOKEN environment variable not set")
    return {"Private-Token": GITLAB_TOKEN}

def get_project_id(repo_path: str) -> int:
    """Get project ID by repository path."""
    encoded_path = quote(repo_path, safe="")
    url = f"{API_BASE}/projects/{encoded_path}"
    response = requests.get(url, headers=get_headers())
    if response.status_code != 200:
        raise ValueError(f"Project {repo_path} not found: {response.text}")
    return response.json()["id"]

def get_pipeline_schedules(project_id: int) -> List[Dict]:
    """Retrieve all pipeline schedules for a project."""
    url = f"{API_BASE}/projects/{project_id}/pipeline_schedules"
    response = requests.get(url, headers=get_headers())
    if response.status_code != 200:
        raise ValueError(f"Failed to get schedules for project ID {project_id}: {response.text}")
    return response.json()

def take_ownership(project_id: int, schedule_id: int) -> None:
    """Take ownership of a pipeline schedule."""
    url = f"{API_BASE}/projects/{project_id}/pipeline_schedules/{schedule_id}/take_ownership"
    response = requests.post(url, headers=get_headers())
    if response.status_code != 200:
        raise ValueError(f"Failed to take ownership of schedule ID {schedule_id}: {response.text}")
    print(f"Took ownership of schedule ID {schedule_id} for project ID {project_id}")

def disable_schedule(project_id: int, schedule_id: int) -> None:
    """Disable a pipeline schedule by setting active to False."""
    url = f"{API_BASE}/projects/{project_id}/pipeline_schedules/{schedule_id}"
    data = {"active": False}
    response = requests.put(url, headers=get_headers(), json=data)
    if response.status_code != 200:
        raise ValueError(f"Failed to disable schedule ID {schedule_id}: {response.text}")
    print(f"Disabled schedule ID {schedule_id} for project ID {project_id}")

def main():
    try:
        # Iterate through repositories
        for repo_path in REPOS:
            print(f"\nProcessing repository: {repo_path}")
            try:
                # Get project ID
                project_id = get_project_id(repo_path)
                
                # Get pipeline schedules
                schedules = get_pipeline_schedules(project_id)
                
                if not schedules:
                    print(f"No pipeline schedules found for {repo_path}")
                    continue
                
                # Process each schedule
                for schedule in schedules:
                    print(f"\nSchedule ID: {schedule['id']}")
                    print(f"Description: {schedule['description']}")
                    print(f"Cron: {schedule['cron']}")
                    print(f"Active: {schedule['active']}")
                    print(f"Current Owner: {schedule['owner']['name']} ({schedule['owner']['username']})")
                    
                    # Take ownership
                    take_ownership(project_id, schedule["id"])
                    
                    # Disable the schedule
                    disable_schedule(project_id, schedule["id"])
                    
            except ValueError as e:
                print(f"Error processing {repo_path}: {str(e)}")
            except Exception as e:
                print(f"Unexpected error for {repo_path}: {str(e)}")
                
    except Exception as e:
        print(f"Failed to process repositories: {str(e)}")

if __name__ == "__main__":
    main()


















--------------------------------------
--------------------------------------
```python
import requests
import os
from typing import List, Dict
from urllib.parse import quote

# Configuration
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab instance URL
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")  # Store token in environment variable
REPOS = ["namespace/project1", "namespace/project2"]  # List of repository paths (e.g., group/project)

# API Endpoints
API_BASE = f"{GITLAB_URL}/api/v4"

def get_headers() -> Dict:
    """Return headers with authorization token."""
    if not GITLAB_TOKEN:
        raise ValueError("GITLAB_TOKEN environment variable not set")
    return {"Private-Token": GITLAB_TOKEN}

def get_project_id(repo_path: str) -> int:
    """Get project ID by repository path."""
    encoded_path = quote(repo_path, safe="")
    url = f"{API_BASE}/projects/{encoded_path}"
    response = requests.get(url, headers=get_headers())
    if response.status_code != 200:
        raise ValueError(f"Project {repo_path} not found: {response.text}")
    return response.json()["id"]

def get_pipeline_schedules(project_id: int) -> List[Dict]:
    """Retrieve all pipeline schedules for a project."""
    url = f"{API_BASE}/projects/{project_id}/pipeline_schedules"
    response = requests.get(url, headers=get_headers())
    if response.status_code != 200:
        raise ValueError(f"Failed to get schedules for project ID {project_id}: {response.text}")
    return response.json()

def disable_schedule(project_id: int, schedule_id: int) -> None:
    """Disable a pipeline schedule by setting active to False."""
    url = f"{API_BASE}/projects/{project_id}/pipeline_schedules/{schedule_id}"
    data = {"active": False}
    response = requests.put(url, headers=get_headers(), json=data)
    if response.status_code != 200:
        raise ValueError(f"Failed to disable schedule ID {schedule_id}: {response.text}")
    print(f"Disabled schedule ID {schedule_id} for project ID {project_id}")

def main():
    try:
        # Iterate through repositories
        for repo_path in REPOS:
            print(f"\nProcessing repository: {repo_path}")
            try:
                # Get project ID
                project_id = get_project_id(repo_path)
                
                # Get pipeline schedules
                schedules = get_pipeline_schedules(project_id)
                
                if not schedules:
                    print(f"No pipeline schedules found for {repo_path}")
                    continue
                
                # Process each schedule
                for schedule in schedules:
                    print(f"\nSchedule ID: {schedule['id']}")
                    print(f"Description: {schedule['description']}")
                    print(f"Cron: {schedule['cron']}")
                    print(f"Active: {schedule['active']}")
                    print(f"Owner: {schedule['owner']['name']} ({schedule['owner']['username']})")
                    
                    # Disable the schedule
                    disable_schedule(project_id, schedule["id"])
                    
            except ValueError as e:
                print(f"Error processing {repo_path}: {str(e)}")
            except Exception as e:
                print(f"Unexpected error for {repo_path}: {str(e)}")
                
    except Exception as e:
        print(f"Failed to process repositories: {str(e)}")

if __name__ == "__main__":
    main()
```













-----------------------------------
----------------------------------
import gitlab
import os
from typing import List, Dict

# Configuration
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab instance URL
GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")  # Store token in environment variable
REPOS = ["project1", "project2"]  # List of repository names (replace with your repos)

def get_gitlab_client() -> gitlab.Gitlab:
    """Initialize and return a GitLab client."""
    if not GITLAB_TOKEN:
        raise ValueError("GITLAB_TOKEN environment variable not set")
    return gitlab.Gitlab(GITLAB_URL, private_token=GITLAB_TOKEN)

def find_project(client: gitlab.Gitlab, repo_name: str) -> Dict:
    """Find a project by name and return its details."""
    projects = client.projects.list(search=repo_name, owned=True, all=True)
    for project in projects:
        if project.name.lower() == repo_name.lower():
            return project
    raise ValueError(f"Project {repo_name} not found")

def get_pipeline_schedules(project: Dict) -> List[Dict]:
    """Retrieve all pipeline schedules for a given project."""
    return project.pipelineschedules.list()

def disable_schedule(project: Dict, schedule: Dict) -> None:
    """Disable a pipeline schedule by setting active to False."""
    schedule.active = False
    schedule.save()
    print(f"Disabled schedule ID {schedule.id} for project {project.name}")

def main():
    try:
        # Initialize GitLab client
        gl = get_gitlab_client()

        # Iterate through repositories
        for repo_name in REPOS:
            print(f"\nProcessing repository: {repo_name}")
            try:
                # Find project
                project = find_project(gl, repo_name)
                
                # Get pipeline schedules
                schedules = get_pipeline_schedules(project)
                
                if not schedules:
                    print(f"No pipeline schedules found for {repo_name}")
                    continue
                
                # Process each schedule
                for schedule in schedules:
                    print(f"\nSchedule ID: {schedule.id}")
                    print(f"Description: {schedule.description}")
                    print(f"Cron: {schedule.cron}")
                    print(f"Active: {schedule.active}")
                    print(f"Owner: {schedule.owner['name']} ({schedule.owner['username']})")
                    
                    # Disable the schedule
                    disable_schedule(project, schedule)
                    
            except ValueError as e:
                print(f"Error processing {repo_name}: {str(e)}")
            except Exception as e:
                print(f"Unexpected error for {repo_name}: {str(e)}")
                
    except Exception as e:
        print(f"Failed to initialize GitLab client: {str(e)}")

if __name__ == "__main__":
    main()




----------------------------------------------
---------------------------------------------

import requests
import urllib.parse
# --- Config ---
GITLAB_URL = "https://gitlab.com"
ACCESS_TOKEN = "YOUR_ACCESS_TOKEN"
PROJECTS = [
    "group/project1",
    "group/project2",
    "group/projectN"
]

HEADERS = {
    "PRIVATE-TOKEN": ACCESS_TOKEN,
    "Content-Type": "application/json"
}

def get_pipeline_schedules(project_path):
    encoded_path = urllib.parse.quote_plus(project_path)
    url = f"{GITLAB_URL}/api/v4/projects/{encoded_path}/pipeline_schedules"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    return response.json()

def disable_schedule(project_path, schedule_id):
    encoded_path = urllib.parse.quote_plus(project_path)
    url = f"{GITLAB_URL}/api/v4/projects/{encoded_path}/pipeline_schedules/{schedule_id}"
    response = requests.put(url, json={"active": False}, headers=HEADERS)
    if response.status_code == 200:
        print(f"→ Disabled schedule ID {schedule_id}")
    else:
        print(f"Failed to disable schedule ID {schedule_id}: {response.status_code} - {response.text}")

# --- Main ---
for project in PROJECTS:
    print(f"\n--- Checking project: {project} ---")
    try:
        schedules = get_pipeline_schedules(project)
        if not schedules:
            print("No schedules found.")
            continue

        for sched in schedules:
            sid = sched["id"]
            cron = sched["cron"]
            active = sched["active"]
            owner = sched.get("owner", {}).get("username", "unknown")

            print(f"Schedule ID: {sid}, Cron: {cron}, Owner: {owner}, Active: {active}")
            if active:
                disable_schedule(project, sid)

    except requests.exceptions.HTTPError as e:
        print(f"Error accessing project {project}: {e}")
    except Exception as e:
        print(f"Unexpected error in {project}: {e}")

