import requests

def download_sha256(url):
    """
    Downloads the .sha256 file from the provided URL and returns its content.
    """
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an error for HTTP issues
        sha256_content = response.text.strip()  # Remove any leading/trailing whitespace
        return sha256_content
    except requests.exceptions.RequestException as e:
        print(f"Error downloading .sha256 file: {e}")
        return None

def read_expected_sha256(file_path):
    """
    Reads the SHA256 value and filename from a file and returns the SHA256 value.
    """
    try:
        with open(file_path, 'r') as f:
            line = f.readline().strip()  # Read the first line and remove whitespace
            sha256_value, _ = line.split(maxsplit=1)  # Split into SHA256 and filename
            return sha256_value
    except FileNotFoundError:
        print(f"File not found: {file_path}")
    except ValueError:
        print(f"Unexpected format in file: {file_path}")
    return None

def validate_sha256(downloaded_sha256, expected_sha256):
    """
    Compares the downloaded SHA256 with the expected SHA256.
    """
    if downloaded_sha256 == expected_sha256:
        print("✅ SHA256 values match. Validation successful.")
        return True
    else:
        print("❌ SHA256 values do not match. Validation failed.")
        return False

# URL to the .sha256 file
sha256_url = "https://example.com/path/to/file.sha256"

# Path to the local temp.sha256 file
expected_sha256_file = "temp.sha256"

# Step 1: Download the SHA256 value from the URL
downloaded_sha256 = download_sha256(sha256_url)

# Step 2: Read the expected SHA256 value from the temp.sha256 file
expected_sha256 = read_expected_sha256(expected_sha256_file)

# Step 3: Compare the downloaded SHA256 with the expected val
