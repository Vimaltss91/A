import os
import logging
import requests
from config import projects  # Import the projects list from config.py

# GitLab configurations
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab instance URL
PRIVATE_TOKEN = "<your_private_token>"  # Replace with your personal access token

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

def get_commit_info(tag_name, project_id):
    """
    Fetch the commit ID and date for a given tag in a specific project.
    """
    url = f"{GITLAB_URL}/api/v4/projects/{project_id}/repository/tags/{tag_name}"
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        commit_id = data["commit"]["id"]
        commit_date = data["commit"]["committed_date"]
        return commit_id, commit_date
    else:
        logger.error(f"Failed to fetch tag info for {tag_name}: {response.text}")
        raise Exception(f"Failed to fetch tag info for {tag_name}")

def log_commit_info(commit_id, commit_date, project_name):
    """
    Log the commit ID and project name in a structured format.
    """
    logger.info("\n%s", "-" * 40)
    logger.info("Project: %s", project_name)
    logger.info("Commit ID: %s", commit_id)
    logger.info("Commit Date: %s", commit_date)
    logger.info("%s", "-" * 40)

def get_branch_commits(branch_name, project_id):
    """
    Fetch all commit IDs for a given branch in a specific project.
    """
    url = f"{GITLAB_URL}/api/v4/projects/{project_id}/repository/commits"
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}
    params = {"ref_name": branch_name}
    commit_ids = set()

    while url:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            commit_ids.update(commit["id"] for commit in data)
            url = response.links.get("next", {}).get("url")
            params = None  # Parameters are only needed for the first request
        else:
            logger.error(f"Failed to fetch commits for branch {branch_name}: {response.text}")
            raise Exception(f"Failed to fetch commits for branch {branch_name}")

    return commit_ids

def get_merge_requests(from_date, to_date, valid_commit_ids, exclusion_keywords, project_id):
    """
    Fetch merge requests merged between the given dates.
    Include only MRs whose merge commit is in the valid_commit_ids set.
    """
    url = f"{GITLAB_URL}/api/v4/projects/{project_id}/merge_requests"
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}
    params = {
        "state": "merged",
        "updated_after": from_date,
        "updated_before": to_date,
    }
    mrs = []

    while url:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            for mr in data:
                logger.debug("MR#%s - Merge Commit: %s, Title: %s", mr["iid"], mr["merge_commit_sha"], mr["title"])
                if mr["merge_commit_sha"] not in valid_commit_ids:
                    continue
                if any(keyword in mr["title"] for keyword in exclusion_keywords):
                    continue
                mrs.append(mr)
            url = response.links.get("next", {}).get("url")
            params = None  # Parameters are only needed for the first request
        else:
            logger.error(f"Failed to fetch merge requests: {response.text}")
            raise Exception(f"Failed to fetch merge requests")

    return mrs

def main():
    tag1 = os.getenv("TAG1")
    tag2 = os.getenv("TAG2")
    if not tag1 or not tag2:
        logger.error("Both TAG1 and TAG2 environment variables must be set.")
        raise ValueError("Both TAG1 and TAG2 environment variables must be set.")

    exclusion_keywords = ["NoJira: merge changes from dev"]

    for project in projects:
        project_name = project["name"]
        project_id = project["id"]
        logger.info("Processing project: %s (ID: %d)", project_name, project_id)

        try:
            logger.info("Fetching commit info for tag %s...", tag1)
            commit_id1, commit_date1 = get_commit_info(tag1, project_id)
            logger.info("Fetching commit info for tag %s...", tag2)
            commit_id2, commit_date2 = get_commit_info(tag2, project_id)

            log_commit_info(commit_id1, commit_date1, project_name)
            log_commit_info(commit_id2, commit_date2, project_name)

            patch_branch = f"{tag2.split('.')[0]}.x-patch"
            logger.info("Fetching commits for branch %s...", patch_branch)
            patch_branch_commits = get_branch_commits(patch_branch, project_id)

            logger.info("Fetching merge requests...")
            merge_requests = get_merge_requests(
                from_date=commit_date1,
                to_date=commit_date2,
                valid_commit_ids=patch_branch_commits,
                exclusion_keywords=exclusion_keywords,
                project_id=project_id,
            )

            logger.info("Merge Requests contributing to %s between %s and %s for %s:", 
                        patch_branch, tag1, tag2, project_name)
            for mr in merge_requests:
                logger.info("- MR#%d: %s (Author: %s)", mr["iid"], mr["title"], mr["author"]["name"])

        except Exception as e:
            logger.error("Error processing project %s: %s", project_name, e)

if __name__ == "__main__":
    main()
