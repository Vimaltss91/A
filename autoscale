import os

def extract_args_from_env(self):
    build_nf = os.getenv('BUILD_NF', '').lower()

    if build_nf == 'policy':
        release_tag = os.getenv('POLICY_RELEASE_TAG', '')
    elif build_nf == 'bsf':
        release_tag = os.getenv('BSF_RELEASE_TAG', '')
    else:
        release_tag = ""

    upg_feature_keys = ['UPG_FEATURE_1', 'UPG_FEATURE_2', 'UPG_FEATURE_3', 'UPG_FEATURE_4']
    upg_rollback = 'NO'
    for key in upg_feature_keys:
        value = os.getenv(key, '').lower()
        if value == 'true':
            upg_rollback = 'YES'
            break
        elif value == 'false':
            upg_rollback = 'NO'

    if build_nf == 'bsf':
        is_pcf = 'NO'
        is_converged = 'NO'
        is_occ = 'NO'
    else:
        policy_mode = os.getenv('POLICY_MODE', '').lower()
        is_pcf = 'YES' if policy_mode == 'pcf' else 'NO'
        is_converged = 'YES' if policy_mode == 'occnp' else 'NO'
        is_occ = 'YES' if os.getenv('INCLUDE_OCC_FEATURES', '').lower() == 'true' else 'NO'

    ats_release_tag = os.getenv('ATS_RELEASE_TAG', 'null')

    official_build = 'YES' if os.getenv('REPORT', 'false').lower() == 'true' else 'NO'

    # Priority check function
    priority = self.priority_check(official_build, release_tag, upg_rollback)

    use_external_docker_registry = os.getenv('USE_EXTERNAL_DOCKER_REGISTRY', '').strip().lower()
    if use_external_docker_registry in ['', 'true']:
        is_tgz = 'NO'
    elif use_external_docker_registry == 'false':
        is_tgz = 'YES'
    else:
        is_tgz = 'NO'

    args_dict = {
        'nf_type': build_nf,
        'release_tag': release_tag,
        'ats_release_tag': ats_release_tag,
        'is_csar': 'YES' if os.getenv('CSAR_DEPLOYMENT', '').lower() == 'true' else 'NO',
        'is_asm': 'YES' if os.getenv('ENABLE_ISTIO_INJECTION', '').lower() == 'true' else 'NO',
        'is_tgz': is_tgz,
        'is_internal_ats': 'YES' if os.getenv('INCLUDE_INTERNAL_ATS_FEATURES', '').lower() == 'true' else 'NO',
        'is_occ': is_occ,
        'is_pcf': is_pcf,
        'is_converged': is_converged,
        'upg_rollback': upg_rollback,
        'official_build': official_build,
        'priority': priority
    }

    return args_dict
