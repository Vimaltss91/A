import requests

# GitLab configurations
GITLAB_URL = "https://gitlab.com"  # Replace with your GitLab instance URL
PRIVATE_TOKEN = "<your_private_token>"  # Replace with your personal access token
PROJECT_ID = "<your_project_id>"  # Replace with your project ID or encoded path


def get_commit_info(tag_name):
    """
    Fetch the commit ID and date for a given tag.
    """
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/tags/{tag_name}"
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        commit_id = data["commit"]["id"]
        commit_date = data["commit"]["committed_date"]
        return commit_id, commit_date
    else:
        raise Exception(f"Failed to fetch tag info for {tag_name}: {response.text}")


def get_branch_commits(branch_name):
    """
    Fetch all commit IDs for a given branch.
    """
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/repository/commits"
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}
    params = {"ref_name": branch_name}

    commit_ids = []
    while url:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            commit_ids.extend(commit["id"] for commit in data)
            url = response.links.get("next", {}).get("url")
            params = None  # Parameters are only needed for the first request
        else:
            raise Exception(f"Failed to fetch commits for branch {branch_name}: {response.text}")

    return set(commit_ids)


def get_merge_requests(from_date, to_date, valid_commit_ids, exclusion_keywords):
    """
    Fetch merge requests merged between the given dates.
    Include only MRs whose merge commit is in the valid_commit_ids set.
    """
    url = f"{GITLAB_URL}/api/v4/projects/{PROJECT_ID}/merge_requests"
    headers = {"PRIVATE-TOKEN": PRIVATE_TOKEN}
    params = {
        "state": "merged",
        "updated_after": from_date,
        "updated_before": to_date,
    }

    mrs = []
    while url:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            for mr in data:
                # Debugging: Log MR details
                print(f"DEBUG: MR#{mr['iid']} - Merge Commit: {mr['merge_commit_sha']}, Title: {mr['title']}")

                # Include only MRs with merge commits in the valid_commit_ids set
                if mr["merge_commit_sha"] not in valid_commit_ids:
                    continue

                # Exclude MRs with specific keywords in the title
                if any(keyword in mr["title"] for keyword in exclusion_keywords):
                    continue

                mrs.append(mr)

            url = response.links.get("next", {}).get("url")
            params = None  # Parameters are only needed for the first request
        else:
            raise Exception(f"Failed to fetch merge requests: {response.text}")

    return mrs


def main():
    # Input tags
    tag1 = input("Enter the first tag (e.g., 23.2.5): ").strip()
    tag2 = input("Enter the second tag (e.g., 23.4.5): ").strip()

    # Exclusion criteria for MRs
    exclusion_keywords = ["NoJira: merge changes from dev"]

    # Define the branch for commits comparison
    patch_branch = f"{tag2.split('.')[0]}.x-patch"

    # Get commit info for both tags
    print(f"Fetching commit info for tag {tag1}...")
    commit_id1, commit_date1 = get_commit_info(tag1)

    print(f"Fetching commit info for tag {tag2}...")
    commit_id2, commit_date2 = get_commit_info(tag2)

    print(f"Commit ID for {tag1}: {commit_id1}, Date: {commit_date1}")
    print(f"Commit ID for {tag2}: {commit_id2}, Date: {commit_date2}")

    # Get all commits in the patch branch
    print(f"Fetching commits for branch {patch_branch}...")
    patch_branch_commits = get_branch_commits(patch_branch)

    # Fetch MRs merged between the two commit dates and present in the patch branch
    print("Fetching merge requests...")
    merge_requests = get_merge_requests(
        from_date=commit_date1,
        to_date=commit_date2,
        valid_commit_ids=patch_branch_commits,
        exclusion_keywords=exclusion_keywords,
    )

    # Display results
    print(f"\nMerge Requests contributing to {patch_branch} between {tag1} and {tag2}:")
    for mr in merge_requests:
        print(f"- MR#{mr['iid']}: {mr['title']} (Author: {mr['author']['name']})")


if __name__ == "__main__":
    main()
