#!/bin/bash

namespace="your-namespace"

deployments=$(kubectl get deployments -n "$namespace" -o jsonpath='{.items[*].metadata.name}')

for deployment in $deployments; do
    if [[ $deployment == *"$namespace"* ]]; then
        cat <<EOF | kubectl apply -f -
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: vpa-$deployment
  namespace: $namespace
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: $deployment
  updatePolicy:
    updateMode: "Auto"
EOF
        echo "VPA applied to $deployment"
    else
        echo "Skipping $deployment as it doesn't contain $namespace in the name"
    fi
done

apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: my-vpa
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind:       "Deployment"
    name:       "my-deployment"
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: "*"
      minAllowed:
        cpu:    100m
        memory: 128Mi
      maxAllowed:
        cpu:    0
        memory: 0
        
       
kubectl get pods --namespace <namespace> -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{range .spec.containers[*]}{.name}{"\t"}{.resources.requests.cpu}{"\t"}{.resources.limits.cpu}{"\n"}{end}{"\n"}{end}'

kubectl get nodes -o json | jq '.items[] | {name: .metadata.name, allocatable_pods: .status.allocatable.pods, total_pods: .status.capacity.pods}'

kubectl get nodes -o custom-columns=NAME:.metadata.name,PODS:.status.capacity.pods,ALLOCATED:.status.allocatable.pods

kubectl get pods -o=jsonpath='{range .items[*]}{.spec.nodeName}:{.status.phase}{"\n"}{end}' | awk '{count[$1]++} END {for (i in count) print i, count[i]}'


NAMESPACE="your-namespace"
KEY="key-to-tolerate"
VALUE="value-to-tolerate"
OPERATOR="Equal"
EFFECT="NoSchedule"

PODS=$(kubectl get pods -n $NAMESPACE -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')

for POD in $PODS; do
  TMP_FILE=$(mktemp)
  kubectl get pod $POD -n $NAMESPACE -o yaml > $TMP_FILE

  # Add toleration to each container in the pod
  CONTAINERS=$(kubectl get pod $POD -n $NAMESPACE -o jsonpath='{range .spec.containers[*]}{.name}{" "}{end}')
  for CONTAINER in $CONTAINERS; do
    kubectl patch pod $POD -n $NAMESPACE --type=json -p \
      "[{ \"op\": \"add\", \"path\": \"/spec/containers?(@.name=='$CONTAINER')/tolerations\", \"value\": [{ \"key\": \"$KEY\", \"operator\": \"$OPERATOR\", \"value\": \"$VALUE\", \"effect\": \"$EFFECT\" }] }]"
  done

  rm $TMP_FILE
done


NAMESPACE="your-namespace"
LABEL_KEY="key"
LABEL_VALUE="value"

PODS=$(kubectl get pods -n $NAMESPACE -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')

for POD in $PODS; do
  TMP_FILE=$(mktemp)
  kubectl get pod $POD -n $NAMESPACE -o yaml > $TMP_FILE

  # Add node selector to the pod's YAML definition
  kubectl patch pod $POD -n $NAMESPACE --type='json' -p \
    "[{\"op\": \"add\", \"path\": \"/spec/nodeSelector\", \"value\": {\"$LABEL_KEY\": \"$LABEL_VALUE\"}}]"

  rm $TMP_FILE
done



#!/bin/bash

LABEL_KEY="key"
LABEL_VALUE="value"

DEPLOYMENTS=$(kubectl get deployments -o json | jq -r '.items[].metadata.name')

for DEPLOYMENT in $DEPLOYMENTS; do
  TMP_FILE=$(mktemp)
  kubectl get deployment $DEPLOYMENT -o yaml > $TMP_FILE

  # Add nodeSelector to the Deployment YAML
  sed -i "s/template:/template:\n    spec:\n      nodeSelector:\n        $LABEL_KEY: $LABEL_VALUE/g" $TMP_FILE

  # Apply the changes to the Deployment
  kubectl apply -f $TMP_FILE

  rm $TMP_FILE
done


#!/bin/bash

NODE_SELECTOR="key=value"

DEPLOYMENTS=$(kubectl get deployments -o json | jq -r '.items[].metadata.name')

for DEPLOYMENT in $DEPLOYMENTS; do
  kubectl patch deployment $DEPLOYMENT --type=json -p \
    "[{ \"op\": \"add\", \"path\": \"/spec/template/spec/nodeSelector\", \"value\": { \"$NODE_SELECTOR\" } }]"
done


sed -i 's/\(^\s*request:\)\s*$/\1\n\2    cpu: <new-cpu-value>\n\2    memory: <new-memory-value>/' file.yaml

sed -i '/<word>/,+2 {/<word>/!b;d;}' file.txt

my_array=("element1" "element2" "element3")

# Iterate over the array elements
for element in "${my_array[@]}"; do
    echo "$element"
done

current_date=$(date +%Y-%m-%d)
jq --arg current_date "$current_date" '.data[] | select(.["time-created"] | contains($current_date))' <your_json_file>

jq --arg current_date "$current_date" '.data[] | select((.["lifecycle-state"] == "test") and (.["time-created"] | contains($current_date)))' <your_json_file>

jq --arg current_date "$current_date" '.data[] | select((.["lifecycle-state"] == "test") and (.["time-created"] | contains($current_date) | not))' <your_json_file>


find /path/to/search -type f -name "*.yaml" -exec sed -i 's/word_to_replace/replacement_word/g' {} +
