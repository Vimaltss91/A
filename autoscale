import requests
from datetime import datetime, timedelta

# GitLab Personal Access Token
token = 'YOUR_PERSONAL_ACCESS_TOKEN'

# GitLab project ID
project_id = 'YOUR_PROJECT_ID'

# GitLab base URL
base_url = 'https://gitlab.com/api/v4'

def get_all_jobs(max_pages=100):
    jobs = []
    page = 1
    per_page = 100  # Maximum items per page

    while page <= max_pages:
        # Get jobs for the current page
        jobs_url = f"{base_url}/projects/{project_id}/jobs?page={page}&per_page={per_page}"
        headers = {'Private-Token': token}
        response = requests.get(jobs_url, headers=headers)

        if response.ok:
            jobs_page = response.json()
            jobs.extend(jobs_page)
            # Check if there are more pages
            if len(jobs_page) < per_page:
                break
            else:
                page += 1
        else:
            print(f"Failed to fetch jobs. Status code: {response.status_code}")
            break

    return jobs

def get_old_jobs(jobs, days=60):
    old_jobs = []
    threshold_date = datetime.now() - timedelta(days=days)
    for job in jobs:
        created_at = datetime.strptime(job['created_at'], '%Y-%m-%dT%H:%M:%S.%fZ')
        if created_at < threshold_date:
            old_jobs.append(job)
    return old_jobs

# Call the function to get all jobs (with a maximum of 100 pages)
all_jobs = get_all_jobs(max_pages=100)

# Filter jobs older than 60 days
old_jobs = get_old_jobs(all_jobs, days=60)

# Extract job IDs
old_job_ids = [job['id'] for job in old_jobs]
print("Job IDs older than 60 days:", old_job_ids)




import requests
from datetime import datetime, timedelta

# GitLab Personal Access Token
token = 'YOUR_PERSONAL_ACCESS_TOKEN'

# GitLab project ID
project_id = 'YOUR_PROJECT_ID'

# GitLab base URL
base_url = 'https://gitlab.com/api/v4'

def get_jobs():
    # Get all jobs in the project
    jobs_url = f"{base_url}/projects/{project_id}/jobs"
    headers = {'Private-Token': token}
    response = requests.get(jobs_url, headers=headers)
    
    if response.status_code == 200:
        jobs = response.json()
        return jobs
    else:
        print(f"Failed to fetch jobs. Status code: {response.status_code}")
        return []

def delete_artifacts():
    # Calculate date 3 months ago
    three_months_ago = datetime.now() - timedelta(days=90)

    # Get all jobs in the project
    jobs = get_jobs()
    
    for job in jobs:
        # Get artifacts for each job
        artifacts_url = f"{base_url}/projects/{project_id}/jobs/{job['id']}/artifacts"
        response = requests.get(artifacts_url, headers={'Private-Token': token})
        
        if response.status_code == 200:
            # Ensure that the response contains 'artifacts' key
            if 'artifacts' in response.json():
                artifacts = response.json()['artifacts']
                for artifact in artifacts:
                    # Get creation date of the artifact
                    created_at = datetime.strptime(artifact['created_at'], '%Y-%m-%dT%H:%M:%S.%fZ')
                    # Check if the artifact is older than 3 months
                    if created_at < three_months_ago:
                        # Delete the artifact
                        delete_artifact_url = f"{base_url}/projects/{project_id}/jobs/{job['id']}/artifacts/{artifact['file_type']}"
                        response = requests.delete(delete_artifact_url, headers={'Private-Token': token})
                        if response.status_code == 204:
                            print(f"Deleted artifact for job {job['id']}")
                        else:
                            print(f"Failed to delete artifact for job {job['id']}")
            else:
                print("No artifacts found for job ", job['id'])
        else:
            print(f"Failed to fetch artifacts for job {job['id']}")

# Call the function to delete artifacts
delete_artifacts()



pip install my_package --extra-index-url=https://username:api_key@artifactory.example.com/python-repo


env | sed 's/^\(.*\)$/export \1/' > .env

import requests
from datetime import datetime, timedelta

# GitLab Personal Access Token
token = 'YOUR_PERSONAL_ACCESS_TOKEN'

# GitLab project ID
project_id = 'YOUR_PROJECT_ID'

# GitLab base URL
base_url = 'https://gitlab.com/api/v4'

def delete_artifacts():
    # Calculate date 3 months ago
    three_months_ago = datetime.now() - timedelta(days=90)

    # Get all jobs in the project
    jobs_url = f"{base_url}/projects/{project_id}/jobs"
    headers = {'Private-Token': token}
    response = requests.get(jobs_url, headers=headers)
    
    if response.status_code == 200:
        jobs = response.json()
        for job in jobs:
            # Get artifacts for each job
            artifacts_url = f"{base_url}/projects/{project_id}/jobs/{job['id']}/artifacts"
            response = requests.get(artifacts_url, headers=headers)
            
            if response.status_code == 200:
                artifacts = response.json()
                for artifact in artifacts:
                    # Get creation date of the artifact
                    created_at = datetime.strptime(artifact['created_at'], '%Y-%m-%dT%H:%M:%S.%fZ')
                    # Check if the artifact is older than 3 months
                    if created_at < three_months_ago:
                        # Delete the artifact
                        delete_artifact_url = f"{base_url}/projects/{project_id}/jobs/{job['id']}/artifacts/{artifact['file_type']}"
                        response = requests.delete(delete_artifact_url, headers=headers)
                        if response.status_code == 204:
                            print(f"Deleted artifact for job {job['id']}")
                        else:
                            print(f"Failed to delete artifact for job {job['id']}")

# Call the function to delete artifacts
delete_artifacts()



import requests

# GitLab Personal Access Token
token = 'YOUR_PERSONAL_ACCESS_TOKEN'

# GitLab project ID
project_id = 'YOUR_PROJECT_ID'

# GitLab base URL
base_url = 'https://gitlab.com/api/v4'

def get_jobs():
    # Get all jobs in the project
    jobs_url = f"{base_url}/projects/{project_id}/jobs"
    headers = {'Private-Token': token}
    response = requests.get(jobs_url, headers=headers)
    
    if response.status_code == 200:
        jobs = response.json()
        return jobs
    else:
        print(f"Failed to fetch jobs. Status code: {response.status_code}")
        return []

# Call the function to get list of jobs
jobs_list = get_jobs()
print(jobs_list)


