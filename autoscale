Okay, I’ll check and coordinate with Bharat. Since we've already pushed the packages to the dev repository and some of them are corrupted, we're still unable to identify the root cause. As a result, it's blocking our testing and further promotion to the release repository

I have sent an email to Benson, mentioning that many Node packages are corrupted and require debugging and manual removal. This is a time-consuming and repetitive process for each package, so I’ve stated that the Node packages are currently blocked from being moved to the release repository


Hi Benson,

Some of the Node packages were previously pushed in a corrupted state. We have rectified a few of them last week, purged the affected versions, and successfully moved the clean packages to the release repository.

However, the remaining packages have only been pushed to the development repository, and several of them are still corrupted. This is currently blocking us from moving them to the release repository.

Additionally, the corrupted packages have to be manually removed from Artifactory each time, which is not scalable.




all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def constraintBundle = ocpmLibs.bundles.ocpmConstraints.get()

        constraintBundle.each {
            def String constraintEntry = it
            def (constraintGroup, constraintModule, constraintVersion) = constraintEntry.tokenize(":")
            
            if (details.requested.group == constraintGroup && details.requested.name == constraintModule) {
                details.useVersion constraintVersion
                details.because 'Constraint defined in 3rd party catalog'
            }
        }

        // ✅ Manual Jetty constraint (outside the bundle)
        if (details.requested.group == "org.eclipse.jetty" && details.requested.name == "jetty-server") {
            details.useVersion "12.0.21"
            details.because "Jetty version override (manual)"
        }
    }
}





# Update system
sudo yum update -y

# Install required tools and Python
sudo yum install -y wget unzip curl python3 java-11-openjdk xorg-x11-server-Xvfb \
    alsa-lib libXScrnSaver gtk3 nss libXcomposite libXcursor libXdamage \
    libXrandr libXtst libgbm

# Install pip
sudo python3 -m ensurepip --upgrade


cat <<EOF | sudo tee /etc/yum.repos.d/google-chrome.repo
[google-chrome]
name=google-chrome
baseurl=https://dl.google.com/linux/chrome/rpm/stable/x86_64
enabled=1
gpgcheck=1
gpgkey=https://dl.google.com/linux/linux_signing_key.pub
EOF

sudo yum install -y google-chrome-stable


# Get Chrome version
CHROME_VERSION=$(google-chrome --version | grep -oP '[0-9.]+' | head -1 | cut -d. -f1)

# Get compatible ChromeDriver version
CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")

# Download and install
wget https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip
unzip chromedriver_linux64.zip
sudo mv chromedriver /usr/local/bin/
chmod +x /usr/local/bin/chromedriver


pip3 install selenium


from selenium import webdriver
from selenium.webdriver.chrome.options import Options

options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')

driver = webdriver.Chrome(options=options)

driver.get("https://example.com")
print("Page Title:", driver.title)

driver.quit()


python3 selenium_test.py

python3 selenium_test.py



sudo yum install -y xorg-x11-server-Xvfb


# Check if xvfb-run exists
which xvfb-run

# If not, create a basic version:
sudo tee /usr/local/bin/xvfb-run > /dev/null <<'EOF'
#!/bin/bash
XVFB_WHD=${XVFB_WHD:-1280x720x24}
XVFB_DISPLAY=${XVFB_DISPLAY:-:99}

Xvfb $XVFB_DISPLAY -screen 0 $XVFB_WHD &
XVFB_PID=$!

export DISPLAY=$XVFB_DISPLAY
"$@"

kill $XVFB_PID
EOF

sudo chmod +x /usr/local/bin/xvfb-run

xvfb-run python3 selenium_test.py



from selenium import webdriver
from selenium.webdriver.chrome.options import Options

options = Options()
# NOT headless — will need Xvfb
# options.add_argument('--headless')  # <-- comment this out
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')

driver = webdriver.Chrome(options=options)
driver.set_window_size(1920, 1080)
driver.get("https://example.com")

# Take screenshot
driver.save_screenshot("screenshot.png")
print("Screenshot saved.")

driver.quit()



from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import tempfile
import time

# ✅ Create a temporary user-data-dir to avoid profile lock/session errors
temp_profile = tempfile.mkdtemp()

options = Options()
# ⚠️ DO NOT use headless mode if you need GUI interaction like file picker
# options.add_argument('--headless')  # Uncomment ONLY if running headless
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument(f'--user-data-dir={temp_profile}')

# ✅ Launch Chrome
driver = webdriver.Chrome(options=options)

# Optional: set window size if needed
driver.set_window_size(1920, 1080)

# ✅ Navigate to test page
driver.get("https://example.com")

# Wait for page to load
time.sleep(2)

# ✅ Take screenshot
driver.save_screenshot("screenshot.png")
print("✅ Screenshot saved at screenshot.png")

# ✅ Clean up
driver.quit()



